#! /bin/bash
### BEGIN INIT INFO
# Provides:          elasticsearch
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:
# Default-Stop:      0 1 6
# Short-Description: Starts elasticsearch
# chkconfig: - 80 15
# Description: Elasticsearch
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

# Pull in sysconfig settings
[ -f /etc/sysconfig/elasticsearch ] && . /etc/sysconfig/elasticsearch

ES_HOME=/usr/share/java/elasticsearch
ES_USER=elasticsearch

DAEMON=${ES_HOME}/bin/elasticsearch
NAME=elasticsearch
PID_FILE=${PIDFILE-/var/run/${NAME}/${NAME}.pid}
LOCK_FILE=${LOCKFILE-/var/lock/subsys/${NAME}}

ES_PATH_LOG=${ES_PATH_LOG-/var/log/${NAME}}
ES_PATH_DATA=${ES_PATH_DATA-/var/lib/${NAME}}
ES_PATH_WORK=${ES_PATH_WORK-/tmp/${NAME}}
ES_PATH_CONF=${ES_PATH_CONF-/etc/${NAME}}
ES_PATH_PLUGINS=${ES_PATH_PLUGINS-${ES_HOME}/plugins}
ES_CONFIG=${ES_CONFIG-${ES_PATH_CONF}/elasticsearch.yml}

DAEMON_OPTS=" \
    -Des.config=${ES_CONFIG} \
    -Des.path.conf=${ES_PATH_CONF} \
    -Des.path.home=${ES_PATH_HOME} \
    -Des.path.logs=${ES_PATH_LOG} \
    -Des.path.data=${ES_PATH_DATA} \
    -Des.path.work=${ES_PATH_WORK} \
    -Des.path.plugins=${ES_PATH_PLUGINS}"

# These environment variables are passed over.
ES_MIN_MEM=${ES_MIN_MEM-256m}
ES_MAX_MEM=${ES_MAX_MEM-1g}
ES_INCLUDE=${ES_INCLUDE-${ES_HOME}/bin/elasticsearch.in.sh}

# Handle multi node environment:
if [ -z $ES_NUM_NODES ]; then
   ES_NUM_NODES=1
fi
if [ ! -z $ES_MULTI_CLUSTER ]; then
   #Count the nodes in the specified data directory
   ES_NUM_NODES=`ls $ES_PATH_DATA/$ES_MULTI_CLUSTER/nodes/ | wc -l`
fi

start() {
    # Start one instance per node entry
    for i in `seq 1 $ES_NUM_NODES`; do
       echo -n $"Starting ${NAME} node $i: "
       mkdir -p $ES_PATH_WORK
       daemon --pidfile=${PID_FILE}.$i --user $ES_USER \
           ES_HOME=$ES_HOME \
           ES_INCLUDE=$ES_INCLUDE \
           ES_MIN_MEM=$ES_MIN_MEM \
           ES_MAX_MEM=$ES_MAX_MEM \
           $DAEMON -p ${PID_FILE}.$i $DAEMON_OPTS
       RETVAL=$?
       echo
       [ $RETVAL -ne 0 ] && break
    done
    [ $RETVAL -eq 0 ] && touch $LOCK_FILE
    [ $RETVAL -ne 0 ] && stop
    return $RETVAL
}

stop() {
    # Slight complication: if no cluster specified but looks like one's in
    # use then see if we can work out what's going on
    if [ -z $ES_MULTI_CLUSTER ] && [ -f ${PID_FILE}.2 ] && [ $ES_NUM_NODES -eq 1 ]; then
       ES_NUM_NODES=`ls ${PID_FILE}.* | wc -l`
    fi
    for i in `seq 1 $ES_NUM_NODES`; do
       echo -n $"Stopping ${NAME} node $i: "
       killproc -p ${PID_FILE}.$i -d 10 $DAEMON
       RETVAL=$?
       echo
       [ $RETVAL = 0 ] && rm -f ${LOCK_FILE} ${PID_FILE}.$i
    done
    return $RETVAL
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        # Slight complication: if no cluster specified but looks like one's in
        # use then see if we can work out what's going on
    if [ -z $ES_MULTI_CLUSTER ] && [ -f ${PID_FILE}.2 ] && [ $ES_NUM_NODES -eq 1 ]; then
           ES_NUM_NODES=`ls ${PID_FILE}.* | wc -l`
        fi
        for i in `seq 1 $ES_NUM_NODES`; do
           status -p ${PID_FILE}.$i $DAEMON
           RETVAL=$?
           [ $RETVAL -ne 0 ] && break
        done
        ;;
    restart|force-reload)
        stop
        start
        ;;
    *)
        N=/etc/init.d/${NAME}
        echo "Usage: $N {start|stop|restart|force-reload}" >&2
        RETVAL=2
        ;;
esac

exit $RETVAL
